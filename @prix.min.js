const root=document.querySelector("#app");let PagesComponents;const componentCache={},$imports=e=>{PagesComponents=e};async function $useNavigate(e){location.origin+e===location.href||window.history.pushState(null,null,e),Router()}let urlRevalidateComponent;const intervalMap=new Map,reloadComp=e=>{if(e.tagName.includes("-")){const t=()=>[e.hasAttribute("use:revalidate"),e.getAttribute("use:revalidate")||1e3],[n,o]=t();if(n){const t=setInterval((async()=>processElement(e)),o);intervalMap.set(e.tagName.toLowerCase(),t),urlRevalidateComponent=location.href}else{const t=e.tagName.toLowerCase(),n=intervalMap.get(t);n?(clearInterval(n),intervalMap.delete(t)):urlRevalidateComponent===location.href==!1&&intervalMap.clear()}}},pagesComponentsFetch=async e=>{const{tag:t,Data:n}=e,o=t.tagName.toLowerCase(),[a,s]=(()=>{const[e,n]=(t.getAttribute("use:fetch")||"").split("|").map((e=>e.trim()));return[e,n]})();let r,c,i;if(componentCache[o])r=await componentCache[o](n);else{const e=`${location.origin}/${a}/${o}.${s}`;if(i=await fetch(e),!i.ok)throw new Error("Failed to fetch page content");"html"===s&&(document.querySelector(o).innerHTML=await i.text()),"js"===s&&(c=await i.text(),r=Function("return "+c)(),t.innerHTML=r(n),componentCache[o]=r)}},processElement=async e=>{const t=e.tagName.toLowerCase(),n=e.hasAttribute("use:fetch"),o=e.hasAttribute("use:revalidate");(e.querySelector("slot")||e).innerHTML=await(n?pagesComponentsFetch(e):PagesComponents[t](e)),await Promise.all(Array.from(e.querySelectorAll("*")).map((async e=>e.tagName.includes("-")&&processElement(e)))),o&&reloadComp(e)};async function customTagsComponents(){const e=Array.from(document.querySelectorAll("*")).filter((e=>{const t=e.tagName.includes("-"),n=e.hasAttribute("priority");return t&&(!n||processElement(e))})),t=new Set,n=new IntersectionObserver((async(n,o)=>{const a=n.find((e=>e.isIntersecting));if(a){const{target:n}=a;processElement(n),o.unobserve(n);const s=e.find((e=>!t.has(e)));s&&t.add(s)&&o.observe(s)}})),o=e.find((e=>!t.has(e)));o&&t.add(o)&&n.observe(o)}function debounce(e,t){let n;return function(...o){clearTimeout(n),n=setTimeout((()=>{e.apply(this,o)}),t)}}const Router=async()=>{async function e(){let e;const n=location.href.match(/#\/([^\/?]+)/);if(e=n?n[1].split("/")[0]:location.pathname.split("/")[1]||Object.keys(PagesComponents)[0],e&&"#"!==e)if(e.includes("-"))t(PagesComponents);else{const n=PagesComponents[e]||"erro";"erro"===n?t(PagesComponents):root.innerHTML=await n(root),customTagsComponents()}}function t(e){const t=Object.keys(e).filter((e=>!e.includes("-")));root.innerHTML=t.map(((e,t)=>`<a class="erro_page" id="${t}" use:href="${location.hash?`/#/${e}/`:`/${e}/`}">${e}</a>`)).join("")}window.addEventListener("popstate",e),root.addEventListener("click",debounce((function(t){t.preventDefault();const n=t.target.getAttribute("use:href");n&&(location.origin+n===location.href||window.history.pushState(null,null,n),e())}),200)),e()},$effect=async e=>{processElement("string"==typeof e?document.querySelector(e):e)},$state=(()=>{const e=new Map;return t=>{let n=e.get(t);return n||(n={value:t,set(e){n.value=e}},e.set(t,n)),n}})(),$setSearchParam=e=>{if(e){const t=new URLSearchParams(window.location.search),n=location.href.split("?")[0];for(const n in e)e.hasOwnProperty(n)&&t.set(n,e[n]);const o=t.toString();history.pushState({},"",n+"?"+o)}};export{debounce,$useNavigate,$imports,$effect,$state,$setSearchParam};